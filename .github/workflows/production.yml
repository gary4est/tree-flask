name: Test and Release (Production)

on:
  release:
    types: [published]

env:
  IMAGE_NAME: test-app

jobs:
  production:
    name: PROD_IMAGE_BUILD
    runs-on: ubuntu-latest
    concurrency:
      group: production
      cancel-in-progress: true
    environment:
      name: production
      url: https://test-app.internal.mileiq.com
    permissions:
      id-token: write
      contents: read
      checks: read
    env:
      IMAGE_TAG: production-${{ github.sha }}-${{ github.event.release.tag_name }}
      REGISTRY: miqproduction.azurecr.io
    outputs:
      image_tag: ${{ env.IMAGE_TAG }}
    steps:
      - name: WAIT_STAGING_IMAGE_BUILD
        uses: lewagon/wait-on-check-action@v1.3.3
        with:
          ref: ${{ github.ref }}
          check-name: "STG_IMAGE_BUILD" # Hard reference on the job check name of staging image.
          repo-token: ${{ secrets.MIQ_GHA_TOKEN }}
          wait-interval: 30

      - name: GIT_SETUP
        uses: actions/checkout@v4

      - name: AZURE_LOGIN
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: ACR_LOGIN
        run: |
          REGISTRY_NAME=$(echo ${{ env.REGISTRY }} | cut -d'.' -f1)
          az acr login --name $REGISTRY_NAME

      - name: AZURE_DOCKER_BUILD
        run: |
          docker build . -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: ENDORLABS_CONTAINER_IMAGE_SCAN
        uses: endorlabs/github-action@v1
        if: success()
        with:
          namespace: "mileiq"
          pr: false
          scan_dependencies: false
          scan_secrets: false
          scan_container: true
          enable_github_action_token: true
          github_token: ${{ secrets.MIQ_GHA_TOKEN }}
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          tags: "actor=${{ github.actor }},commit=${{ github.sha }},branch=${{ github.ref }}"

      - name: AZURE_DOCKER_PUSH
        if: steps.CS_SCAN.outputs.exit-code == 0
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  # Add the monitoring job for production deployment
  monitor_deployment:
    name: FLUXCD
    needs: production
    if: success()
    uses: ./.github/workflows/fluxcd-deployment-check.yml
    with:
      environment: production
      app_name: miq-test-app
      namespace: miq-test-app
      image_tag: ${{ needs.production.outputs.image_tag }}
      registry: miqproduction.azurecr.io
      image_name: test-app
      aks_resource_group: miq-production-internal-tools-aks
      aks_cluster_name: miq-production-internal-tools
      max_attempts: 5
      sleep_seconds: 20
      subscription_id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
